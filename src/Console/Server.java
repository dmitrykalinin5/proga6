package Console;

import Collections.CollectionManager;
import Collections.Ticket;
import Commands.CommandProcessor;
import Network.Request;
import Network.Response;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.io.*;
import java.net.Socket;
import java.net.ServerSocket;
import java.net.SocketException;
import java.util.ArrayDeque;
import java.util.Deque;

/**
 * –û–¥–Ω–æ–ø–æ—Ç–æ—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –∫–æ–º–∞–Ω–¥—ã –ø–æ TCP
 */
public class Server {
    private static final Logger logger = LogManager.getLogger(Server.class);
    private static CollectionManager collectionManager = new CollectionManager();
    private static Deque<String> historyDeque = new ArrayDeque<>();
    private static CommandProcessor commandProcessor;

    public Server(CollectionManager collectionManager, Deque<String> historyDeque) {
        Server.collectionManager = collectionManager;
        Server.historyDeque = historyDeque;
    }

    public void run() {
        try (ServerSocket serverSocket = new ServerSocket(5000)) {
            logger.info("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω");

            while (true) {
                try (Socket clientSocket = serverSocket.accept();
                     ObjectOutputStream out = new ObjectOutputStream(clientSocket.getOutputStream());
                     ObjectInputStream in = new ObjectInputStream(clientSocket.getInputStream());) {

                    commandProcessor = new CommandProcessor(collectionManager, historyDeque, out, in, "server");
                    commandProcessor.CommandPut();

                    logger.info("–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω");

                    String responseText;
                    while (true) {
                        Object obj = in.readObject(); // üü° –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤: –∂–¥–µ—Ç –æ–±—ä–µ–∫—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                        if (obj instanceof Request request) {
                            String command = request.commandName();
                            Ticket argument = request.argument();

                            if (argument != null) {
                                collectionManager.getQueue().add(argument);
                                responseText = ("–≠–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é");
                            } else {
                                responseText = commandProcessor.executeCommand(command);
                                logger.info("–ö–æ–º–∞–Ω–¥–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
                            }

                            out.writeObject(new Response(responseText));
                            out.flush();

                            if ("exit".equals(command)) {
                                logger.info("–ö–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Å–µ—Å—Å–∏—é –∫–æ–º–∞–Ω–¥–æ–π exit");
                                break;
                            }
                        }

                        logger.info("–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É");


                    }
                } catch (EOFException | SocketException e) {
                    logger.error("–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è");
                } catch (ClassNotFoundException | IOException e) {
                    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–µ–Ω—Ç–∞");
                    e.printStackTrace(); // –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void executeCommand(String command) {
        commandProcessor.CommandPut();
//        return commandProcessor.executeCommand(command);
    }

    public static void main(String[] args) {
        collectionManager.loadFromFile();

        new Thread(() -> {
            Server server = new Server(collectionManager, historyDeque);
            server.run();
        }).start();

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
